library(ggplot2)
ggplot(daily_df, aes(x = Date, y = TweetCount)) +
geom_point(color = "red", size = 2) +
geom_text(aes(label = TweetCount), vjust = -0.5, size = 3) +
labs(title = "Daily Tweet Counts for Canada",
x = "Date",
y = "Number of Tweets") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
tweet_days <- as.Date(dates)
daily_counts <- table(tweet_days)
daily_df <- as.data.frame(daily_counts)
colnames(daily_df) <- c("Date", "TweetCount")
daily_df$Month <- factor(format(as.Date(daily_df$Date), "%b"), levels = month.abb)
View(daily_df)
library(ggplot2)
ggplot(daily_df, aes(x = Date, y = TweetCount, color = Month)) +
geom_point(size = 2) +
geom_text(aes(label = TweetCount), vjust = -0.5, size = 3) +
labs(title = "Daily Tweet Counts for Canada",
x = "Date",
y = "Number of Tweets") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
trend_df <- read.csv("canada_tweet_trend.csv")
ggplot(trend_df, aes(x = Month, y = Tweet_Count, fill = Month)) +
geom_bar(stat = "identity", width = 0.6) +
labs(
title = "Monthly Tweet Counts for Canada",
x = "Month",
y = "Number of Tweets"
) +
theme_minimal() +
theme(legend.position = "none")
trend_df
trend_df <- read.csv("canada_tweet_trend.csv")
trend_df$Month <- factor(trend_df$Month, levels = month.abb)
trend_df
trend_df$Month <- factor(trend_df$Month, levels = c("Apr 2009", "May 2009", "Jun 2009"))
trend_df
trend_df <- read.csv("canada_tweet_trend.csv")
trend_df$Month <- factor(trend_df$Month, levels = c("Apr 2009", "May 2009", "Jun 2009"))
# Bar plot
trend_df
# Bar plot
ggplot(trend_df, aes(x = Month, y = Tweet_Count, fill = Month)) +
geom_bar(stat = "identity", width = 0.6) +
labs(
title = "Monthly Tweet Counts for Canada",
x = "Month",
y = "Number of Tweets"
) +
theme_minimal() +
theme(legend.position = "none")
# Bar plot
ggplot(trend_df, aes(x = Month, y = Tweet_Count)) +
geom_bar(stat = "identity", width = 0.6) +
labs(
title = "Monthly Tweet Counts for Canada",
x = "Month",
y = "Number of Tweets"
) +
geom_text()
trend_df <- read.csv("canada_tweet_trend.csv")
trend_df$Month <- factor(trend_df$Month, levels = c("Apr 2009", "May 2009", "Jun 2009"))
# Bar plot
library(ggplot2)
ggplot(trend_df, aes(x = Month, y = Tweet_Count)) +
geom_bar(stat = "identity", width = 0.6, fill = "skyblue") +
geom_text(aes(label = Tweet_Count), vjust = -0.5, size = 4) +
labs(
title = "Monthly Tweet Counts for Canada",
x = "Month",
y = "Number of Tweets"
) +
theme_minimal()
sentiment_A <- read.csv("sentiment-countryA.csv")
sentiment_B <- read.csv("sentiment-countryB.csv")
View(sentiment_A)
sentiment_A <- read.csv("sentiment-countryA.csv", F)
View(sentiment_A)
rm()
sentiment_A <- read.csv("sentiment-countryA.csv", F)
sentiment_B <- read.csv("sentiment-countryB.csv", F)
rm()
sentiment_A <- read.csv("sentiment-countryA.csv", F)
sentiment_B <- read.csv("sentiment-countryB.csv", F)
View(sentiment_A)
View(sentiment_A)
sentiment_A <- read.csv("sentiment-countryA.csv", F)
sentiment_B <- read.csv("sentiment-countryB.csv", F)
colnames(sentiment_A) <- c("Sentiment", "Count")
colnames(sentiment_B) <- c("Sentiment", "Count")
sentiment_A$Country <- "Canada"
sentiment_B$Country <- "Singapore"
combined_df <- rbind(sentiment_A, sentiment_B)
View(combined_df)
View(sentiment_A)
View(sentiment_B)
sentiment_A <- read.csv("sentiment-countryA.csv", F)
sentiment_B <- read.csv("sentiment-countryB.csv", F)
colnames(sentiment_A) <- c("Sentiment", "Count")
colnames(sentiment_B) <- c("Sentiment", "Count")
sentiment_A$Country <- "Canada"
sentiment_B$Country <- "Singapore"
combined_df <- rbind(sentiment_A, sentiment_B)
ggplot(combined_df, aes(x = Sentiment, y = Count, fill = Country)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
labs(
title = "Sentiment Comparison between Country A (Canada) and Country B (Singapore)",
x = "Sentiment",
y = "Tweet Count"
) +
theme_minimal() +
scale_fill_manual(values = c("CountryA" = "skyblue", "CountryB" = "salmon"))
ggplot(combined_df, aes(x = Sentiment, y = Count, fill = Country)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
labs(
title = "Sentiment Comparison between Country A (Canada) and Country B (Singapore)",
x = "Sentiment",
y = "Tweet Count"
) +
theme_minimal()
ggplot(combined_df, aes(x = Sentiment, y = Count, fill = Country)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Count),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3)
labs(
title = "Sentiment Comparison between Country A (Canada) and Country B (Singapore)",
x = "Sentiment",
y = "Tweet Count"
) +
theme_minimal()
sentiment_A <- read.csv("sentiment-countryA.csv", F)
sentiment_B <- read.csv("sentiment-countryB.csv", F)
colnames(sentiment_A) <- c("Sentiment", "Count")
colnames(sentiment_B) <- c("Sentiment", "Count")
sentiment_A$Country <- "Canada"
sentiment_B$Country <- "Singapore"
combined_df <- rbind(sentiment_A, sentiment_B)
ggplot(combined_df, aes(x = Sentiment, y = Count, fill = Country)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Count),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3)
labs(
title = "Sentiment Comparison between Country A (Canada) and Country B (Singapore)",
x = "Sentiment",
y = "Tweet Count"
) +
theme_minimal()
ggplot(combined_df, aes(x = Sentiment, y = Count, fill = Country)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Count),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3)
labs(
title = "Sentiment Comparison between Country A (Canada) and Country B (Singapore)",
x = "Sentiment",
y = "Tweet Count"
) +
theme_minimal()
rm(list = ls())
dev.off()
sentiment_A <- read.csv("sentiment-countryA.csv", F)
sentiment_B <- read.csv("sentiment-countryB.csv", F)
colnames(sentiment_A) <- c("Sentiment", "Count")
colnames(sentiment_B) <- c("Sentiment", "Count")
sentiment_A$Country <- "Canada"
sentiment_B$Country <- "Singapore"
combined_df <- rbind(sentiment_A, sentiment_B)
ggplot(combined_df, aes(x = Sentiment, y = Count, fill = Country)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Count),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3)
labs(
title = "Sentiment Comparison between Country A (Canada) and Country B (Singapore)",
x = "Sentiment",
y = "Tweet Count"
) +
theme_minimal()
dev.off()
rm(list = ls())
sentiment_A <- read.csv("sentiment-countryA.csv", F)
sentiment_B <- read.csv("sentiment-countryB.csv", F)
colnames(sentiment_A) <- c("Sentiment", "Count")
colnames(sentiment_B) <- c("Sentiment", "Count")
sentiment_A$Country <- "Canada"
sentiment_B$Country <- "Singapore"
combined_df <- rbind(sentiment_A, sentiment_B)
ggplot(combined_df, aes(x = Sentiment, y = Count, fill = Country)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Count),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3)
labs(
title = "Sentiment Comparison between Country A (Canada) and Country B (Singapore)",
x = "Sentiment",
y = "Tweet Count"
) +
theme_minimal()
ggplot(combined_df, aes(x = Sentiment, y = Count, fill = Country)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Count),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
labs(
title = "Sentiment Comparison between Country A (Canada) and Country B (Singapore)",
x = "Sentiment",
y = "Tweet Count"
) +
theme_minimal()
setwd("~/Documents/FIT3179/DV2")
library(tidyverse)
library(janitor)
rm(list = ls())
raw <- read_csv("MALAYSIA_2022_PARLIAMENT_RESULTS.csv")
View(raw)
ge15 <- read_csv("MALAYSIA_2022_PARLIAMENT_RESULTS.csv")
rm(list = ls())
ge15 <- read_csv("MALAYSIA_2022_PARLIAMENT_RESULTS.csv")
# Split coalition and party, then aggregate seat counts
coalition_summary <- ge15 %>%
separate(`WINNING PARTY`, into = c("coalition", "party"), sep = " - ", fill = "right") %>%
group_by(coalition) %>%
summarise(seats = n()) %>%
arrange(desc(seats))
# Print result
print(coalition_summary)
View(coalition_summary)
write_csv(coalition_summary, "ge15_coalition_summary.csv")
library(tidyverse)
library(janitor)
rm(list = ls())
# Read your GE15 results CSV
ge15 <- read_csv("MALAYSIA_2022_PARLIAMENT_RESULTS.csv")  # replace with your file path
# Clean column names just in case
ge15 <- janitor::clean_names(ge15)
# Split the "winning_party" into coalition and party
ge15_clean <- ge15 %>%
separate(winning_party, into = c("coalition", "party"), sep = " - ", fill = "right") %>%
mutate(party = if_else(is.na(party), coalition, party))  # handle cases like "PN - DIRECT"
# Aggregate: count how many seats each party has per coalition
coalition_party_summary <- ge15_clean %>%
group_by(coalition, party) %>%
summarise(seats = n(), .groups = "drop") %>%
arrange(desc(seats))
# View the result
print(coalition_party_summary)
View(coalition_party_summary)
write_csv(coalition_party_summary, "coalition_party_summary.csv")
setwd("~/Documents/FIT3179/FIT3179-Week10-Homework/data")
# 1) Read
raw <- read_csv("MALAYSIA_2022_PARLIAMENT_RESULTS.csv")
df <- raw |> clean_names()
rm(list = ls())
raw <- read_csv("MALAYSIA_2022_PARLIAMENT_RESULTS.csv")
View(raw)
df <- raw |> clean_names()
View(df)
# 3) Keep only needed cols & coerce to numeric
df_small <- df |>
select(state, total_electorate, total_ballots_issued, turnout) |>
mutate(
total_electorate     = parse_number(total_electorate),
total_ballots_issued = parse_number(total_ballots_issued),
# recompute turnout from counts (robust if % column has issues)
turnout_recalc = 100 * total_ballots_issued / total_electorate,
# choose recalculated if available, else the provided %
turnout_percent = coalesce(turnout_recalc, parse_number(turnout))
)
library(tidyverse)
library(janitor)
# 3) Keep only needed cols & coerce to numeric
df_small <- df |>
select(state, total_electorate, total_ballots_issued, turnout_percent) |>
mutate(
total_electorate     = parse_number(total_electorate),
total_ballots_issued = parse_number(total_ballots_issued),
# recompute turnout from counts (robust if % column has issues)
turnout_recalc = 100 * total_ballots_issued / total_electorate,
# choose recalculated if available, else the provided %
turnout_percent = coalesce(turnout_recalc, parse_number(turnout_percent))
)
library(tidyverse)
library(janitor)
# ---- Paths (edit to your files) ----
ge14_path <- "MALAYSIA_2018_PARLIAMENT_RESULTS.csv"
ge15_path <- "MALAYSIA_2022_PARLIAMENT_RESULTS.csv"
# ---- Helper: standardise state names to your preferred labels ----
standardise_state <- function(x) {
x <- str_trim(x)
x <- str_squish(x)
# Upper for matching, then map special cases, then title case
xu <- toupper(x)
xu <- case_when(
xu %in% c("WILAYAH PERSEKUTUAN KUALA LUMPUR", "KUALA LUMPUR") ~ "Kuala Lumpur",
xu %in% c("WILAYAH PERSEKUTUAN PUTRAJAYA", "PUTRAJAYA")       ~ "Putrajaya",
xu %in% c("WILAYAH PERSEKUTUAN LABUAN", "LABUAN")             ~ "Labuan",
xu == "PULAU PINANG"                                         ~ "Pulau Pinang",
xu == "NEGERI SEMBILAN"                                      ~ "Negeri Sembilan",
TRUE ~ str_to_title(str_to_lower(xu))
)
xu
}
# Expects columns like:
# STATE, PARLIAMENTARY CONSTITUENCY CODE, TOTAL ELECTORATE, TOTAL BALLOTS ISSUED, TURNOUT (%)
process_election <- function(file, election_label) {
raw <- read_csv(file, show_col_types = FALSE) |>
clean_names()
# Try to find columns by loose matching in case of slight header diffs
# (You can hardcode names if your files are consistent.)
col_state   <- names(raw)[str_detect(names(raw), "^state$")]
col_code    <- names(raw)[str_detect(names(raw), "parliamentary.*code")]
col_elect   <- names(raw)[str_detect(names(raw), "total.*electorate|electors")]
col_ballots <- names(raw)[str_detect(names(raw), "total.*ballots.*issued")]
col_turnout <- names(raw)[str_detect(names(raw), "turnout")]
if (length(col_state) != 1 || length(col_code) != 1 ||
length(col_elect) != 1 || length(col_ballots) != 1) {
stop("Could not detect required columns. Check your headers.")
}
df <- raw |>
# Keep only one row per constituency (just in case your source has per-candidate rows)
distinct(.data[[col_code]], .keep_all = TRUE) |>
transmute(
state_raw = .data[[col_state]],
state     = standardise_state(.data[[col_state]]),
code      = .data[[col_code]],
# Robust numeric parsing (handles commas, %, blanks)
registered_voters = readr::parse_number(.data[[col_elect]]),
voted             = readr::parse_number(.data[[col_ballots]]),
# Turnout(%) in source can be ignored and re-computed; keep only for QC if present
turnout_src       = if (!is.null(col_turnout) && length(col_turnout) == 1)
readr::parse_number(.data[[col_turnout]]) else NA_real_
)
# Aggregate to state level
state_summary <- df |>
group_by(state) |>
summarise(
registered_voters = sum(registered_voters, na.rm = TRUE),
voted             = sum(voted, na.rm = TRUE),
turnout_percent   = round(100 * voted / registered_voters, 2),
.groups = "drop"
) |>
arrange(state) |>
mutate(election = election_label) |>
relocate(state, election, turnout_percent, registered_voters, voted)
state_summary
}
ge14_state <- process_election(ge14_path, "GE14")
rm(list = ls())
# ---- Paths (edit to your files) ----
ge14_path <- "MALAYSIA_2018_PARLIAMENT_RESULTS.csv"
ge15_path <- "MALAYSIA_2022_PARLIAMENT_RESULTS.csv"
# ---- Helper: standardise state names to your preferred labels ----
standardise_state <- function(x) {
x <- str_trim(x)
x <- str_squish(x)
# Upper for matching, then map special cases, then title case
xu <- toupper(x)
xu <- case_when(
xu %in% c("WILAYAH PERSEKUTUAN KUALA LUMPUR", "KUALA LUMPUR") ~ "Kuala Lumpur",
xu %in% c("WILAYAH PERSEKUTUAN PUTRAJAYA", "PUTRAJAYA")       ~ "Putrajaya",
xu %in% c("WILAYAH PERSEKUTUAN LABUAN", "LABUAN")             ~ "Labuan",
xu == "PULAU PINANG"                                         ~ "Pulau Pinang",
xu == "NEGERI SEMBILAN"                                      ~ "Negeri Sembilan",
TRUE ~ str_to_title(str_to_lower(xu))
)
xu
}
# ---- Core processor for one election file ----
# Expects columns like:
# STATE, PARLIAMENTARY CONSTITUENCY CODE, TOTAL ELECTORATE, TOTAL BALLOTS ISSUED, TURNOUT (%)
process_election <- function(file, election_label) {
raw <- read_csv(file, show_col_types = FALSE) |>
clean_names()
# Try to find columns by loose matching in case of slight header diffs
# (You can hardcode names if your files are consistent.)
col_state   <- names(raw)[str_detect(names(raw), "^state$")]
col_code    <- names(raw)[str_detect(names(raw), "parliamentary.*code")]
col_elect   <- names(raw)[str_detect(names(raw), "total.*electorate|electors")]
col_ballots <- names(raw)[str_detect(names(raw), "total.*ballots.*issued")]
col_turnout <- names(raw)[str_detect(names(raw), "turnout")]
if (length(col_state) != 1 || length(col_code) != 1 ||
length(col_elect) != 1 || length(col_ballots) != 1) {
stop("Could not detect required columns. Check your headers.")
}
df <- raw |>
# Keep only one row per constituency (just in case your source has per-candidate rows)
distinct(.data[[col_code]], .keep_all = TRUE) |>
transmute(
state_raw = .data[[col_state]],
state     = standardise_state(.data[[col_state]]),
code      = .data[[col_code]],
# Robust numeric parsing (handles commas, %, blanks)
registered_voters = readr::parse_number(.data[[col_elect]]),
voted             = readr::parse_number(.data[[col_ballots]]),
# Turnout(%) in source can be ignored and re-computed; keep only for QC if present
turnout_src       = if (!is.null(col_turnout) && length(col_turnout) == 1)
readr::parse_number(.data[[col_turnout]]) else NA_real_
)
# Aggregate to state level
state_summary <- df |>
group_by(state) |>
summarise(
registered_voters = sum(registered_voters, na.rm = TRUE),
voted             = sum(voted, na.rm = TRUE),
turnout_percent   = round(100 * voted / registered_voters, 2),
.groups = "drop"
) |>
arrange(state) |>
mutate(election = election_label) |>
relocate(state, election, turnout_percent, registered_voters, voted)
state_summary
}
# ---- Run for GE14 & GE15 ----
ge14_state <- process_election(ge14_path, "GE14")
library(tidyverse)
library(janitor)
rm(list = ls())
# 1) Read
raw <- read_csv("MALAYSIA_2022_PARLIAMENT_RESULTS.csv")
df <- raw |> clean_names()
library(tidyverse)
library(janitor)
# ---- Clear environment ----
rm(list = ls())
# ---- 1) Read and clean ----
raw <- read_csv("MALAYSIA_2022_PARLIAMENT_RESULTS.csv")
df <- raw |>
clean_names()
df_small <- df |>
select(state, total_electorate, total_ballots_issued, turnout_percent) |>
mutate(
total_electorate     = parse_number(total_electorate),
total_ballots_issued = parse_number(total_ballots_issued),
# recompute turnout for accuracy
turnout_recalc = 100 * total_ballots_issued / total_electorate,
# prefer recalculated value if both exist
turnout_percent = coalesce(turnout_recalc, parse_number(turnout_percent))
)
View(df)
View(df)
View(raw)
setwd("~/Documents/FIT3179/FIT3179-Week10-Homework/data")
library(tidyverse)
library(janitor)
# ---- Clear environment ----
rm(list = ls())
raw <- read_csv("MALAYSIA_2022_PARLIAMENT_RESULTS.csv")
rm(list = ls())
ge15_raw <- read_csv("MALAYSIA_2022_PARLIAMENT_RESULTS.csv", show_col_types = FALSE) |>
clean_names()
View(ge15_raw)
ge15_state <- ge15_raw |>
# keep only what we need
select(state, total_electorate, total_ballots_issued) |>
# aggregate to state
group_by(state) |>
summarise(
registered_voters = sum(total_electorate, na.rm = TRUE),
voted             = sum(total_ballots_issued, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
turnout_percent = round(100 * voted / registered_voters, 2),
# make state names nice case for joining/legends later
state = str_to_title(state)
) |>
arrange(state)
View(ge15_state)
write_csv(ge15_state, "state_turnout_ge15.csv")
# ---------- GE14 ----------
ge14_raw <- read_csv("MALAYSIA_2018_PARLIAMENT_RESULTS.csv", show_col_types = FALSE) |>
clean_names()
ge14_state <- ge14_raw |>
select(state, total_electorate, total_ballots_issued) |>
group_by(state) |>
summarise(
registered_voters = sum(total_electorate, na.rm = TRUE),
voted             = sum(total_ballots_issued, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
turnout_percent = round(100 * voted / registered_voters, 2),
state = str_to_title(state)
) |>
arrange(state)
View(ge14_raw)
col(ge14_raw)
colnames(ge14_raw)
ge14_raw <- read_csv("MALAYSIA_2018_PARLIAMENT_RESULTS.csv", show_col_types = FALSE) |>
clean_names()
ge14_state <- ge14_raw |>
select(state, total_electorate, total_ballot_issued) |>
group_by(state) |>
summarise(
registered_voters = sum(total_electorate, na.rm = TRUE),
voted             = sum(total_ballot_issued, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
turnout_percent = round(100 * voted / registered_voters, 2),
state = str_to_title(state)
) |>
arrange(state)
View(ge14_state)
View(ge15_state)
View(ge14_state)
write_csv(ge14_state, "state_turnout_ge14.csv")
